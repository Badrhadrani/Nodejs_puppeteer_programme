import { EventEmitter, Injectable, NgModule } from '@angular/core';
import { Headers, Http, HttpModule, Request, RequestMethod, ResponseContentType, URLSearchParams } from '@angular/http';
import { CommonModule } from '@angular/common';
import { Observable } from 'rxjs';
import 'rxjs/add/operator/map';

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var RequestService = (function () {
    function RequestService() {
        this._AUTHORIZATION = "Authorization";
        this._BASIC = "Basic";
        this._API = "api";
    }
    /**
     * @param {?} resource
     * @param {?} params
     * @return {?}
     */
    RequestService.prototype.search = function (resource, params) {
        return this.request(this.resourceUrl(resource), RequestMethod.Get, params);
    };
    /**
     * @param {?} resource
     * @param {?} id
     * @param {?} id_language
     * @return {?}
     */
    RequestService.prototype.resource = function (resource, id, id_language) {
        var /** @type {?} */ params = new APIParameters();
        params.id_language = id_language;
        return this.request(this.resourceUrl(resource, id), RequestMethod.Get, params);
    };
    /**
     * @param {?} url
     * @param {?} method
     * @param {?=} params
     * @param {?=} body
     * @return {?}
     */
    RequestService.prototype.request = function (url, method, params, body) {
        if (!params) {
            params = new APIParameters();
        }
        return this.getRequest(url, method, params, ResponseContentType.Json, body);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    RequestService.prototype.getAuthData = function (data) {
        return btoa(data + ":");
    };
    /**
     * @param {?} url
     * @param {?} key
     * @return {?}
     */
    RequestService.prototype.apiConfigurationRequest = function (url, key) {
        this._url = url;
        this._authData = this.getAuthData(key);
        return new Request({
            url: this.buildUrl([]),
            method: RequestMethod.Get,
            headers: this.headers,
            params: new APIParameters(),
            responseType: ResponseContentType.Json
        });
    };
    /**
     * @param {?} request
     * @return {?}
     */
    RequestService.prototype.setXHRHeaders = function (request) {
        request.setRequestHeader(this._AUTHORIZATION, this.getAuthValue(this._authData));
    };
    /**
     * @param {?} resource
     * @param {?=} id
     * @return {?}
     */
    RequestService.prototype.resourceUrl = function (resource, id) {
        var /** @type {?} */ parts = [resource];
        if (id)
            parts.push(id);
        return this.buildUrl(parts);
    };
    Object.defineProperty(RequestService.prototype, "headers", {
        /**
         * @return {?}
         */
        get: function () {
            if (!this._headers) {
                this._headers = new Headers(this.getAuthHeaders(this._authData));
            }
            /*
            else {
                if(this._authData != this._headers.get(this._AUTHORIZATION))
                    this._headers.set(this._AUTHORIZATION, this._authData)
            }
            */
            return this._headers;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} authData
     * @return {?}
     */
    RequestService.prototype.getAuthHeaders = function (authData) {
        var /** @type {?} */ h = {};
        h[this._AUTHORIZATION] = this.getAuthValue(authData);
        return h;
    };
    /**
     * @param {?} url
     * @param {?} method
     * @param {?} params
     * @param {?} responseType
     * @param {?} body
     * @return {?}
     */
    RequestService.prototype.getRequest = function (url, method, params, responseType, body) {
        return new Request({
            url: url,
            params: params,
            headers: this.headers,
            responseType: responseType,
            method: method,
            body: body
        });
    };
    /**
     * @param {?} authData
     * @return {?}
     */
    RequestService.prototype.getAuthValue = function (authData) {
        return this._BASIC + " " + authData;
    };
    /**
     * @param {?} parts
     * @return {?}
     */
    RequestService.prototype.buildUrl = function (parts) {
        return this.computeUrl([this._url, this._API].concat(parts));
    };
    /**
     * @return {?}
     */
    RequestService.prototype.apiUrl = function () {
        return this.buildUrl([]);
    };
    Object.defineProperty(RequestService.prototype, "siteUrl", {
        /**
         * @return {?}
         */
        get: function () {
            return this._url;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} resource
     * @param {?} id
     * @param {?=} id_image
     * @return {?}
     */
    RequestService.prototype.getResourceImageUrl = function (resource, id, id_image) {
        var /** @type {?} */ url = [this.apiUrl(), "images", resource, id];
        if (id_image)
            url.push(id_image);
        return this.computeUrl(url);
    };
    /**
     * @param {?} parts
     * @return {?}
     */
    RequestService.prototype.computeUrl = function (parts) {
        return parts.join("/");
    };
    return RequestService;
}());
RequestService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
RequestService.ctorParameters = function () { return []; };
var APIParametersNames = {};
APIParametersNames.display = 0;
APIParametersNames.filter = 1;
APIParametersNames.output_format = 2;
APIParametersNames.language = 3;
APIParametersNames.ps_method = 4;
APIParametersNames[APIParametersNames.display] = "display";
APIParametersNames[APIParametersNames.filter] = "filter";
APIParametersNames[APIParametersNames.output_format] = "output_format";
APIParametersNames[APIParametersNames.language] = "language";
APIParametersNames[APIParametersNames.ps_method] = "ps_method";
var APIParametersValues = {};
APIParametersValues.JSON = 0;
APIParametersValues.XML = 1;
APIParametersValues.full = 2;
APIParametersValues.GET = 3;
APIParametersValues.POST = 4;
APIParametersValues.PUT = 5;
APIParametersValues.DELETE = 6;
APIParametersValues[APIParametersValues.JSON] = "JSON";
APIParametersValues[APIParametersValues.XML] = "XML";
APIParametersValues[APIParametersValues.full] = "full";
APIParametersValues[APIParametersValues.GET] = "GET";
APIParametersValues[APIParametersValues.POST] = "POST";
APIParametersValues[APIParametersValues.PUT] = "PUT";
APIParametersValues[APIParametersValues.DELETE] = "DELETE";
var APIParameters = (function (_super) {
    __extends(APIParameters, _super);
    function APIParameters() {
        var _this = _super.call(this) || this;
        _this.outputFormat = APIParametersValues.JSON;
        return _this;
    }
    /**
     * @param {?=} format
     * @return {?}
     */
    APIParameters.getOutputFormatPart = function (format) {
        if (format === void 0) { format = APIParametersValues.JSON; }
        return APIParametersNames[APIParametersNames.output_format] + "=" + APIParametersValues[format];
    };
    Object.defineProperty(APIParameters.prototype, "outputFormat", {
        /**
         * @return {?}
         */
        get: function () {
            return this._outputFormat;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._outputFormat = v;
            this.set(APIParametersNames[APIParametersNames.output_format], APIParametersValues[v]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(APIParameters.prototype, "display", {
        /**
         * @return {?}
         */
        get: function () {
            return this._display;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._display = v;
            var /** @type {?} */ stringVal;
            if (v == APIParametersValues.full)
                stringVal = APIParametersValues[APIParametersValues.full];
            else
                stringVal = this.arrayValue(v, ",");
            this.set(APIParametersNames[APIParametersNames.display], stringVal);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(APIParameters.prototype, "id_language", {
        /**
         * @return {?}
         */
        get: function () {
            return this._id_language;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._id_language = v;
            this.set(APIParametersNames[APIParametersNames.language], v);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} name
     * @param {?} values
     * @param {?=} separator
     * @return {?}
     */
    APIParameters.prototype.filter = function (name, values, separator) {
        if (!separator)
            separator = "|";
        var /** @type {?} */ stringVal = values.join(separator);
        name = APIParametersNames[APIParametersNames.filter] + ("[" + name + "]");
        this.set(name, this.arrayValue(values, separator));
    };
    /**
     * @param {?} strings
     * @param {?} separator
     * @return {?}
     */
    APIParameters.prototype.arrayValue = function (strings, separator) {
        return "[" + strings.join(separator) + "]";
    };
    return APIParameters;
}(URLSearchParams));

var __extends$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ID = "id";
var LANGUAGE = "language";
var LANGUAGES = "languages";
var ASSOCIATIONS = "associations";
var PRESTASHOP = "prestashop";
var APIService = (function () {
    /**
     * @param {?} http
     * @param {?} requestService
     */
    function APIService(http, requestService) {
        this.http = http;
        this._languages = null;
        this.id_languageChange = new EventEmitter();
        this._id_language = null;
        this._requestService = requestService;
    }
    Object.defineProperty(APIService.prototype, "languages", {
        /**
         * @return {?}
         */
        get: function () {
            return this._languages;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(APIService.prototype, "id_language", {
        /**
         * @return {?}
         */
        get: function () {
            return this._id_language;
        },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            var /** @type {?} */ error = null;
            if (!this._languages) {
                error = "The language list is not available";
            }
            else {
                var /** @type {?} */ found = false;
                for (var _i = 0, _a = this._languages; _i < _a.length; _i++) {
                    var language = _a[_i];
                    if (language.id == value) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    error = "Language not found";
                }
            }
            if (error)
                throw new Error(error);
            this._id_language = value;
            this.id_languageChange.emit(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(APIService.prototype, "requestService", {
        /**
         * @return {?}
         */
        get: function () {
            return this._requestService;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(APIService.prototype, "connected", {
        /**
         * @return {?}
         */
        get: function () {
            return this._connected;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} url
     * @param {?} key
     * @return {?}
     */
    APIService.prototype.connect = function (url, key) {
        var _this = this;
        return Observable.create(function (observer) {
            _this.http.request(_this._requestService.apiConfigurationRequest(url, key)).subscribe(function (response) {
                var /** @type {?} */ json = response.json();
                _this._resourcesMethods = json.api;
                _this._connected = true;
                _this.getLanguages().subscribe(function (languages) {
                    observer.next(true);
                }, observer.error);
            }, function (error) {
                observer.next(false);
            });
        });
    };
    /**
     * @return {?}
     */
    APIService.prototype.getLanguages = function () {
        var _this = this;
        return Observable.create(function (observer) {
            var /** @type {?} */ resource = LANGUAGES;
            if (_this._languages) {
                observer.next(_this._languages);
                return;
            }
            var /** @type {?} */ params = new APIParameters();
            params.display = APIParametersValues.full;
            _this.http.request(_this.requestService.request(_this.requestService.resourceUrl(resource), RequestMethod.Get, params)).subscribe(function (response) {
                if (!response.ok) {
                    observer.error("Request FAIL");
                    return;
                }
                _this._languages = response.json()[resource];
                for (var _i = 0, _a = _this._languages; _i < _a.length; _i++) {
                    var language = _a[_i];
                    if (language.active) {
                        _this._id_language = language.id;
                        break;
                    }
                }
                if (!_this._id_language) {
                    observer.error(new Error("There is not active language"));
                }
                else {
                    observer.next(_this._languages);
                }
            }, observer.error);
        });
    };
    /**
     * @param {?} method
     * @return {?}
     */
    APIService.prototype.getMethodAsString = function (method) {
        var /** @type {?} */ m;
        switch (method) {
            case RequestMethod.Get:
                m = "get";
                break;
            case RequestMethod.Delete:
                m = "delete";
                break;
            case RequestMethod.Post:
                m = "post";
                break;
            case RequestMethod.Put:
                m = "put";
                break;
            default:
                break;
        }
        return m;
    };
    /**
     * @param {?} resource
     * @param {?} method
     * @return {?}
     */
    APIService.prototype.isMethodAllowed = function (resource, method) {
        if (this._resourcesMethods[resource]) {
            var /** @type {?} */ m = this.getMethodAsString(method);
            if (m)
                return this._resourcesMethods[resource][m];
        }
        return false;
    };
    return APIService;
}());
APIService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
APIService.ctorParameters = function () { return [
    { type: Http, },
    { type: RequestService, },
]; };
/**
 * @abstract
 */
var AbstractService = (function () {
    /**
     * @param {?} http
     * @param {?} apiService
     * @param {?} nodename
     * @param {?} resource
     * @param {?} properties
     * @param {?} translatableIndexes
     * @param {?} readonlyIndexes
     * @param {?} requiredIndexes
     * @param {?} associations
     */
    function AbstractService(http, apiService, nodename, resource, properties, translatableIndexes, readonlyIndexes, requiredIndexes, associations) {
        this.http = http;
        this.apiService = apiService;
        this.nodename = nodename;
        this.resource = resource;
        this.properties = properties;
        this.translatableIndexes = translatableIndexes;
        this.readonlyIndexes = readonlyIndexes;
        this.requiredIndexes = requiredIndexes;
        this.associations = associations;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    AbstractService.prototype.createInstance = function (id) {
        return ({ id: id });
    };
    /**
     * @param {?} id
     * @return {?}
     */
    AbstractService.prototype.get = function (id) {
        var _this = this;
        var /** @type {?} */ unallowed = this.checkConnectionAndMeyhodIsAllowed(RequestMethod.Get);
        if (unallowed)
            return unallowed;
        var /** @type {?} */ params = this.apiParameters;
        return this.http.request(this.requestService.resource(this.resource, id, this.id_language)).map(function (response) {
            var /** @type {?} */ json = response.json();
            return json[_this.nodename][0];
        });
    };
    /**
     * @param {?} parameters
     * @return {?}
     */
    AbstractService.prototype.search = function (parameters) {
        var _this = this;
        var /** @type {?} */ unallowed = this.checkConnectionAndMeyhodIsAllowed(RequestMethod.Get);
        if (unallowed)
            return unallowed;
        return this.http.request(this.requestService.search(this.resource, parameters)).map(function (response) {
            return response.json()[_this.resource];
        });
    };
    /**
     * @param {?} input
     * @return {?}
     */
    AbstractService.prototype.put = function (input) {
        return this.send(input, RequestMethod.Put);
    };
    /**
     * @param {?} input
     * @return {?}
     */
    AbstractService.prototype.post = function (input) {
        return this.send(input, RequestMethod.Post);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    AbstractService.prototype.delete = function (id) {
        var /** @type {?} */ method = RequestMethod.Post;
        var /** @type {?} */ unallowed = this.checkConnectionAndMeyhodIsAllowed(method);
        if (unallowed)
            return unallowed;
        var /** @type {?} */ ids;
        if (id instanceof Array)
            ids = id;
        else
            ids = [id];
        var /** @type {?} */ params = new APIParameters();
        params.set(ID, "[" + ids.join(",") + "]");
        params.set(APIParametersNames[APIParametersNames.ps_method], APIParametersValues[APIParametersValues.DELETE]);
        return this.http.request(this.requestService.request(this.requestService.resourceUrl(this.resource), method, params)).map(function (response) { return response.ok; });
    };
    /**
     * @param {?} propertie
     * @return {?}
     */
    AbstractService.prototype.isTranslatable = function (propertie) {
        var /** @type {?} */ i = this.properties.indexOf(propertie);
        return this.translatableIndexes.indexOf(i) != -1;
    };
    /**
     * @param {?} propertie
     * @return {?}
     */
    AbstractService.prototype.isWritable = function (propertie) {
        var /** @type {?} */ i = this.properties.indexOf(propertie);
        return this.readonlyIndexes.indexOf(i) == -1;
    };
    /**
     * @param {?} propertie
     * @return {?}
     */
    AbstractService.prototype.isRequired = function (propertie) {
        var /** @type {?} */ i = this.properties.indexOf(propertie);
        return this.requiredIndexes.indexOf(i) != -1;
    };
    /**
     * @param {?} input
     * @param {?} method
     * @return {?}
     */
    AbstractService.prototype.serialize = function (input, method) {
        var /** @type {?} */ output = [];
        var /** @type {?} */ data;
        var /** @type {?} */ inputs;
        if (input instanceof Array)
            inputs = input;
        else
            inputs = [input];
        for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {
            var item = inputs_1[_i];
            data = this.serializeInstance(item, method);
            if (data instanceof Error)
                return data;
            output.push(data);
        }
        return "<" + PRESTASHOP + ">\n" + output.join("\n") + "\n</" + PRESTASHOP + ">";
    };
    /**
     * @param {?} input
     * @param {?} method
     * @return {?}
     */
    AbstractService.prototype.send = function (input, method) {
        var _this = this;
        var /** @type {?} */ unallowed = this.checkConnectionAndMeyhodIsAllowed(method);
        if (unallowed)
            return unallowed;
        var /** @type {?} */ array;
        if (input instanceof Array)
            array = input;
        else
            array = [input];
        var /** @type {?} */ body = this.serialize(input, method);
        if (body instanceof Error) {
            return this.getErrorObservable(body.message);
        }
        return this.http.request(this.requestService.request(this.requestService.resourceUrl(this.resource), method, this.apiParameters, body)).map(function (response) {
            var /** @type {?} */ resources = response.json()[_this.resource];
            if (method == RequestMethod.Post) {
                var /** @type {?} */ n = array.length;
                for (var /** @type {?} */ i = 0; i < n; i++) {
                    input[i].id = resources[i].id;
                }
            }
            return resources;
        });
    };
    Object.defineProperty(AbstractService.prototype, "requestService", {
        /**
         * @return {?}
         */
        get: function () {
            return this.apiService.requestService;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractService.prototype, "id_language", {
        /**
         * @return {?}
         */
        get: function () {
            return this.apiService.id_language;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractService.prototype, "apiParameters", {
        /**
         * @return {?}
         */
        get: function () {
            var /** @type {?} */ params = new APIParameters();
            params.id_language = this.id_language;
            return params;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} error
     * @return {?}
     */
    AbstractService.prototype.getErrorObservable = function (error) {
        return Observable.create(function (observer) {
            observer.error(error);
        });
    };
    /**
     * @param {?} method
     * @return {?}
     */
    AbstractService.prototype.checkConnectionAndMeyhodIsAllowed = function (method) {
        var /** @type {?} */ error = null;
        if (!this.apiService.connected)
            error = "The APIService is not connected";
        else if (!this.apiService.isMethodAllowed(this.resource, method))
            error = "Method " + this.apiService.getMethodAsString(method).toUpperCase() + " is not allowed for resource '" + this.resource + "'";
        if (error) {
            return this.getErrorObservable(error);
        }
        return null;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    AbstractService.prototype.serializeValue = function (value) {
        if (value == undefined || value == null)
            value = "";
        return String(value).trim();
    };
    /**
     * @param {?} item
     * @param {?} properties
     * @return {?}
     */
    AbstractService.prototype.hasProperties = function (item, properties) {
        var /** @type {?} */ missing = [];
        for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {
            var property = properties_1[_i];
            if (!item.hasOwnProperty(property))
                missing.push(property);
        }
        return missing;
    };
    /**
     * @param {?} instance
     * @param {?} method
     * @return {?}
     */
    AbstractService.prototype.serializeInstance = function (instance, method) {
        var /** @type {?} */ properties = this.properties.slice();
        if (this.associations)
            properties.push(ASSOCIATIONS);
        if (method == RequestMethod.Put)
            properties.push(ID);
        properties = this.hasProperties(instance, properties);
        if (properties.length)
            return new Error("[Serialization FAIL] missing properties : [" + properties.join(",") + "]");
        var /** @type {?} */ i, /** @type {?} */ j, /** @type {?} */ k;
        var /** @type {?} */ p;
        var /** @type {?} */ required = [];
        for (var _i = 0, _a = this.requiredIndexes; _i < _a.length; _i++) {
            i = _a[_i];
            p = this.properties[i];
            if (!instance[p] || !String(instance[p]).length || !String(instance[p]).trim().length) {
                required.push(p);
            }
        }
        if (required.length)
            return new Error("[Serialization FAIL] required properties not set : [" + required.join(",") + "]");
        var /** @type {?} */ nodeName = this.nodename;
        var /** @type {?} */ xml = ["<" + nodeName + ">"];
        p = this.serializeValue(instance[ID]);
        if (method == RequestMethod.Put) {
            if (p != "")
                xml.push("<" + ID + ">" + instance.id + "</" + ID + ">");
            else
                return new Error("[Serialization FAIL] value of property " + ID + " must be set for the PUT method");
        }
        else {
            if (p != "")
                return new Error("[Serialization FAIL] value of property " + ID + " must be empty for the POST method");
        }
        var /** @type {?} */ l = LANGUAGE;
        var /** @type {?} */ lid = this.apiService.id_language;
        for (var _b = 0, _c = this.properties; _b < _c.length; _b++) {
            p = _c[_b];
            if (!this.isWritable(p)) {
                continue;
            }
            if (this.isTranslatable(p)) {
                xml.push("<" + p + "><" + l + " " + ID + "=\"" + lid + "\">" + this.serializeValue(instance[p]) + "</" + l + "></" + p + ">");
                continue;
            }
            xml.push("<" + p + ">" + this.serializeValue(instance[p]) + "</" + p + ">");
        }
        var /** @type {?} */ asso;
        var /** @type {?} */ items;
        if (this.associations) {
            asso = instance[ASSOCIATIONS];
            p = ASSOCIATIONS;
            xml.push("<" + p + ">");
            var /** @type {?} */ itemProperties = void 0;
            for (var /** @type {?} */ assoName in this.associations) {
                if (this.hasProperties(asso, [assoName]).length)
                    continue;
                xml.push("<" + assoName + ">");
                for (var /** @type {?} */ assoNodeName in this.associations[assoName]) {
                    items = asso[assoName];
                    if (!items.length)
                        continue;
                    xml.push("<" + assoNodeName + ">");
                    itemProperties = this.associations[assoName][assoNodeName];
                    for (var _d = 0, _e = asso[assoName]; _d < _e.length; _d++) {
                        var item = _e[_d];
                        properties = this.hasProperties(item, itemProperties);
                        if (properties.length)
                            return new Error("[Serialization FAIL] missing " + p + "." + assoName + "." + assoNodeName + " properties : [" + properties.join(",") + "]");
                        for (var _f = 0, itemProperties_1 = itemProperties; _f < itemProperties_1.length; _f++) {
                            var ip = itemProperties_1[_f];
                            xml.push("<" + ip + ">" + this.serializeValue(item[ip]) + "</" + ip + ">");
                        }
                    }
                    xml.push("</" + assoNodeName + ">");
                }
                xml.push("</" + assoName + ">");
            }
            xml.push("</" + p + ">");
        }
        xml.push("</" + nodeName + ">");
        return xml.join("\n");
    };
    return AbstractService;
}());
var AddressService = (function (_super) {
    __extends$1(AddressService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function AddressService(http, apiService) {
        return _super.call(this, http, apiService, 'address', 'addresses', [
            'id_customer',
            'id_manufacturer',
            'id_supplier',
            'id_warehouse',
            'id_country' /* [4] */,
            'id_state',
            'alias' /* [6] */,
            'company',
            'lastname' /* [8] */,
            'firstname' /* [9] */,
            'vat_number',
            'address1' /* [11] */,
            'address2',
            'postcode',
            'city' /* [14] */,
            'other',
            'phone',
            'phone_mobile',
            'dni',
            'deleted',
            'date_add',
            'date_upd'
        ], [], [], [4, 6, 8, 9, 11, 14], null) || this;
    }
    return AddressService;
}(AbstractService));
AddressService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
AddressService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var CarrierService = (function (_super) {
    __extends$1(CarrierService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function CarrierService(http, apiService) {
        return _super.call(this, http, apiService, 'carrier', 'carriers', [
            'deleted',
            'is_module',
            'id_tax_rules_group',
            'id_reference',
            'name' /* [4] */,
            'active' /* [5] */,
            'is_free',
            'url',
            'shipping_handling',
            'shipping_external',
            'range_behavior',
            'shipping_method',
            'max_width',
            'max_height',
            'max_depth',
            'max_weight',
            'grade',
            'external_module_name',
            'need_range',
            'position',
            'delay' /* [20] */
        ], [20], [], [4, 5, 20], null) || this;
    }
    return CarrierService;
}(AbstractService));
CarrierService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
CarrierService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var CartRuleService = (function (_super) {
    __extends$1(CartRuleService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function CartRuleService(http, apiService) {
        return _super.call(this, http, apiService, 'cart_rule', 'cart_rules', [
            'id_customer',
            'date_from' /* [1] */,
            'date_to' /* [2] */,
            'description',
            'quantity',
            'quantity_per_user',
            'priority',
            'partial_use',
            'code',
            'minimum_amount',
            'minimum_amount_tax',
            'minimum_amount_currency',
            'minimum_amount_shipping',
            'country_restriction',
            'carrier_restriction',
            'group_restriction',
            'cart_rule_restriction',
            'product_restriction',
            'shop_restriction',
            'free_shipping',
            'reduction_percent',
            'reduction_amount',
            'reduction_tax',
            'reduction_currency',
            'reduction_product',
            'gift_product',
            'gift_product_attribute',
            'highlight',
            'active',
            'date_add',
            'date_upd',
            'name' /* [31] */
        ], [31], [], [1, 2, 31], null) || this;
    }
    return CartRuleService;
}(AbstractService));
CartRuleService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
CartRuleService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var CartService = (function (_super) {
    __extends$1(CartService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function CartService(http, apiService) {
        return _super.call(this, http, apiService, 'cart', 'carts', [
            'id_address_delivery',
            'id_address_invoice',
            'id_currency' /* [2] */,
            'id_customer',
            'id_guest',
            'id_lang' /* [5] */,
            'id_shop_group',
            'id_shop',
            'id_carrier',
            'recyclable',
            'gift',
            'gift_message',
            'mobile_theme',
            'delivery_option',
            'secure_key',
            'allow_seperated_package',
            'date_add',
            'date_upd'
        ], [], [], [2, 5], {
            cart_rows: { cart_row: ["id_product", "id_product_attribute", "id_address_delivery", "quantity"] }
        }) || this;
    }
    return CartService;
}(AbstractService));
CartService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
CartService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var CategoryService = (function (_super) {
    __extends$1(CategoryService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function CategoryService(http, apiService) {
        return _super.call(this, http, apiService, 'category', 'categories', [
            'id_parent',
            'level_depth' /* [1] */,
            'nb_products_recursive' /* [2] */,
            'active' /* [3] */,
            'id_shop_default',
            'is_root_category',
            'position',
            'date_add',
            'date_upd',
            'name' /* [9] */,
            'link_rewrite' /* [10] */,
            'description' /* [11] */,
            'meta_title' /* [12] */,
            'meta_description' /* [13] */,
            'meta_keywords' /* [14] */
        ], [9, 10, 11, 12, 13, 14], [1, 2], [3, 9, 10], {
            categories: { category: ["id"] },
            products: { product: ["id"] }
        }) || this;
    }
    return CategoryService;
}(AbstractService));
CategoryService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
CategoryService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var CombinationService = (function (_super) {
    __extends$1(CombinationService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function CombinationService(http, apiService) {
        return _super.call(this, http, apiService, 'combination', 'combinations', [
            'id_product' /* [0] */,
            'location',
            'ean13',
            'upc',
            'quantity',
            'reference',
            'supplier_reference',
            'wholesale_price',
            'price',
            'ecotax',
            'weight',
            'unit_price_impact',
            'minimal_quantity' /* [12] */,
            'default_on',
            'available_date'
        ], [], [], [0, 12], {
            product_option_values: { product_option_value: ["id"] },
            images: { image: ["id"] }
        }) || this;
    }
    return CombinationService;
}(AbstractService));
CombinationService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
CombinationService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var ConfigurationService = (function (_super) {
    __extends$1(ConfigurationService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function ConfigurationService(http, apiService) {
        return _super.call(this, http, apiService, 'configuration', 'configurations', [
            'value',
            'name' /* [1] */,
            'id_shop_group',
            'id_shop',
            'date_add',
            'date_upd'
        ], [], [], [1], null) || this;
    }
    return ConfigurationService;
}(AbstractService));
ConfigurationService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ConfigurationService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var ContactService = (function (_super) {
    __extends$1(ContactService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function ContactService(http, apiService) {
        return _super.call(this, http, apiService, 'contact', 'contacts', [
            'email',
            'customer_service',
            'name' /* [2] */,
            'description' /* [3] */
        ], [2, 3], [], [2], null) || this;
    }
    return ContactService;
}(AbstractService));
ContactService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ContactService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var ContentService = (function (_super) {
    __extends$1(ContentService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function ContentService(http, apiService) {
        return _super.call(this, http, apiService, 'content', 'content_management_system', [
            'id_cms_category',
            'position',
            'indexation',
            'active',
            'meta_description' /* [4] */,
            'meta_keywords' /* [5] */,
            'meta_title' /* [6] */,
            'link_rewrite' /* [7] */,
            'content' /* [8] */
        ], [4, 5, 6, 7, 8], [], [6, 7], null) || this;
    }
    return ContentService;
}(AbstractService));
ContentService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ContentService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var CountryService = (function (_super) {
    __extends$1(CountryService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function CountryService(http, apiService) {
        return _super.call(this, http, apiService, 'country', 'countries', [
            'id_zone' /* [0] */,
            'id_currency',
            'call_prefix',
            'iso_code' /* [3] */,
            'active',
            'contains_states' /* [5] */,
            'need_identification_number' /* [6] */,
            'need_zip_code',
            'zip_code_format',
            'display_tax_label' /* [9] */,
            'name' /* [10] */
        ], [10], [], [0, 3, 5, 6, 9, 10], null) || this;
    }
    return CountryService;
}(AbstractService));
CountryService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
CountryService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var CurrencyService = (function (_super) {
    __extends$1(CurrencyService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function CurrencyService(http, apiService) {
        return _super.call(this, http, apiService, 'currency', 'currencies', [
            'name' /* [0] */,
            'iso_code' /* [1] */,
            'iso_code_num',
            'blank',
            'sign' /* [4] */,
            'format' /* [5] */,
            'decimals' /* [6] */,
            'conversion_rate' /* [7] */,
            'deleted',
            'active'
        ], [], [], [0, 1, 4, 5, 6, 7], null) || this;
    }
    return CurrencyService;
}(AbstractService));
CurrencyService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
CurrencyService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var CustomerMessageService = (function (_super) {
    __extends$1(CustomerMessageService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function CustomerMessageService(http, apiService) {
        return _super.call(this, http, apiService, 'customer_message', 'customer_messages', [
            'id_employee',
            'id_customer_thread',
            'ip_address',
            'message' /* [3] */,
            'file_name',
            'user_agent',
            'ps_private',
            'date_add',
            'date_upd',
            'read'
        ], [], [], [3], null) || this;
    }
    return CustomerMessageService;
}(AbstractService));
CustomerMessageService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
CustomerMessageService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var CustomerThreadService = (function (_super) {
    __extends$1(CustomerThreadService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function CustomerThreadService(http, apiService) {
        return _super.call(this, http, apiService, 'customer_thread', 'customer_threads', [
            'id_lang' /* [0] */,
            'id_shop',
            'id_customer',
            'id_order',
            'id_product',
            'id_contact' /* [5] */,
            'email',
            'token' /* [7] */,
            'status',
            'date_add',
            'date_upd'
        ], [], [], [0, 5, 7], {
            customer_messages: { customer_message: ["id"] }
        }) || this;
    }
    return CustomerThreadService;
}(AbstractService));
CustomerThreadService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
CustomerThreadService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var CustomerService = (function (_super) {
    __extends$1(CustomerService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function CustomerService(http, apiService) {
        return _super.call(this, http, apiService, 'customer', 'customers', [
            'id_default_group',
            'id_lang',
            'newsletter_date_add',
            'ip_registration_newsletter',
            'last_passwd_gen' /* [4] */,
            'secure_key' /* [5] */,
            'deleted',
            'passwd' /* [7] */,
            'lastname' /* [8] */,
            'firstname' /* [9] */,
            'email' /* [10] */,
            'id_gender',
            'birthday',
            'newsletter',
            'optin',
            'website',
            'company',
            'siret',
            'ape',
            'outstanding_allow_amount',
            'show_public_prices',
            'id_risk',
            'max_payment_days',
            'active',
            'note',
            'is_guest',
            'id_shop',
            'id_shop_group',
            'date_add',
            'date_upd'
        ], [], [4, 5], [7, 8, 9, 10], {
            groups: { group: ["id"] }
        }) || this;
    }
    return CustomerService;
}(AbstractService));
CustomerService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
CustomerService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var CustomizationService = (function (_super) {
    __extends$1(CustomizationService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function CustomizationService(http, apiService) {
        return _super.call(this, http, apiService, 'customization', 'customizations', [
            'id_address_delivery' /* [0] */,
            'id_cart' /* [1] */,
            'id_product' /* [2] */,
            'id_product_attribute' /* [3] */,
            'quantity' /* [4] */,
            'quantity_refunded' /* [5] */,
            'quantity_returned' /* [6] */,
            'in_cart' /* [7] */
        ], [], [], [0, 1, 2, 3, 4, 5, 6, 7], {
            customized_data_text_fields: { customized_data_text_field: ["id_customization_field", "value"] },
            customized_data_images: { customized_data_image: ["id_customization_field", "value"] }
        }) || this;
    }
    return CustomizationService;
}(AbstractService));
CustomizationService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
CustomizationService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var DeliveryService = (function (_super) {
    __extends$1(DeliveryService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function DeliveryService(http, apiService) {
        return _super.call(this, http, apiService, 'delivery', 'deliveries', [
            'id_carrier' /* [0] */,
            'id_range_price' /* [1] */,
            'id_range_weight' /* [2] */,
            'id_zone' /* [3] */,
            'id_shop',
            'id_shop_group',
            'price' /* [6] */
        ], [], [], [0, 1, 2, 3, 6], null) || this;
    }
    return DeliveryService;
}(AbstractService));
DeliveryService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
DeliveryService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var EmployeeService = (function (_super) {
    __extends$1(EmployeeService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function EmployeeService(http, apiService) {
        return _super.call(this, http, apiService, 'employee', 'employees', [
            'id_lang' /* [0] */,
            'last_passwd_gen' /* [1] */,
            'stats_date_from' /* [2] */,
            'stats_date_to' /* [3] */,
            'stats_compare_from' /* [4] */,
            'stats_compare_to' /* [5] */,
            'passwd' /* [6] */,
            'lastname' /* [7] */,
            'firstname' /* [8] */,
            'email' /* [9] */,
            'active',
            'optin',
            'id_profile' /* [12] */,
            'bo_color',
            'default_tab',
            'bo_theme',
            'bo_css',
            'bo_width',
            'bo_menu',
            'stats_compare_option',
            'preselect_date_range',
            'id_last_order',
            'id_last_customer_message',
            'id_last_customer'
        ], [], [1, 2, 3, 4, 5], [0, 6, 7, 8, 9, 12], null) || this;
    }
    return EmployeeService;
}(AbstractService));
EmployeeService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
EmployeeService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var GroupService = (function (_super) {
    __extends$1(GroupService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function GroupService(http, apiService) {
        return _super.call(this, http, apiService, 'group', 'groups', [
            'reduction',
            'price_display_method' /* [1] */,
            'show_prices',
            'date_add',
            'date_upd',
            'name' /* [5] */
        ], [5], [], [1, 5], null) || this;
    }
    return GroupService;
}(AbstractService));
GroupService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
GroupService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var GuestService = (function (_super) {
    __extends$1(GuestService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function GuestService(http, apiService) {
        return _super.call(this, http, apiService, 'guest', 'guests', [
            'id_customer',
            'id_operating_system',
            'id_web_browser',
            'javascript',
            'screen_resolution_x',
            'screen_resolution_y',
            'screen_color',
            'sun_java',
            'adobe_flash',
            'adobe_director',
            'apple_quicktime',
            'real_player',
            'windows_media',
            'accept_language',
            'mobile_theme'
        ], [], [], [], null) || this;
    }
    return GuestService;
}(AbstractService));
GuestService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
GuestService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var ImageTypeService = (function (_super) {
    __extends$1(ImageTypeService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function ImageTypeService(http, apiService) {
        return _super.call(this, http, apiService, 'image_type', 'image_types', [
            'name' /* [0] */,
            'width' /* [1] */,
            'height' /* [2] */,
            'categories',
            'products',
            'manufacturers',
            'suppliers',
            'scenes',
            'stores'
        ], [], [], [0, 1, 2], null) || this;
    }
    return ImageTypeService;
}(AbstractService));
ImageTypeService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ImageTypeService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var LanguageService = (function (_super) {
    __extends$1(LanguageService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function LanguageService(http, apiService) {
        return _super.call(this, http, apiService, 'language', 'languages', [
            'name' /* [0] */,
            'iso_code' /* [1] */,
            'language_code',
            'active',
            'is_rtl',
            'date_format_lite' /* [5] */,
            'date_format_full' /* [6] */
        ], [], [], [0, 1, 5, 6], null) || this;
    }
    return LanguageService;
}(AbstractService));
LanguageService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
LanguageService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var ManufacturerService = (function (_super) {
    __extends$1(ManufacturerService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function ManufacturerService(http, apiService) {
        return _super.call(this, http, apiService, 'manufacturer', 'manufacturers', [
            'active',
            'link_rewrite' /* [1] */,
            'name' /* [2] */,
            'date_add',
            'date_upd',
            'description' /* [5] */,
            'short_description' /* [6] */,
            'meta_title' /* [7] */,
            'meta_description' /* [8] */,
            'meta_keywords' /* [9] */
        ], [5, 6, 7, 8, 9], [1], [2], {
            addresses: { address: ["id"] }
        }) || this;
    }
    return ManufacturerService;
}(AbstractService));
ManufacturerService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ManufacturerService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var OrderCarrierService = (function (_super) {
    __extends$1(OrderCarrierService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function OrderCarrierService(http, apiService) {
        return _super.call(this, http, apiService, 'order_carrier', 'order_carriers', [
            'id_order' /* [0] */,
            'id_carrier' /* [1] */,
            'id_order_invoice',
            'weight',
            'shipping_cost_tax_excl',
            'shipping_cost_tax_incl',
            'tracking_number',
            'date_add'
        ], [], [], [0, 1], null) || this;
    }
    return OrderCarrierService;
}(AbstractService));
OrderCarrierService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
OrderCarrierService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var OrderDetailService = (function (_super) {
    __extends$1(OrderDetailService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function OrderDetailService(http, apiService) {
        return _super.call(this, http, apiService, 'order_detail', 'order_details', [
            'id_order' /* [0] */,
            'product_id',
            'product_attribute_id',
            'product_quantity_reinjected',
            'group_reduction',
            'discount_quantity_applied',
            'download_hash',
            'download_deadline',
            'id_order_invoice',
            'id_warehouse' /* [9] */,
            'id_shop' /* [10] */,
            'product_name' /* [11] */,
            'product_quantity' /* [12] */,
            'product_quantity_in_stock',
            'product_quantity_return',
            'product_quantity_refunded',
            'product_price' /* [16] */,
            'reduction_percent',
            'reduction_amount',
            'reduction_amount_tax_incl',
            'reduction_amount_tax_excl',
            'product_quantity_discount',
            'product_ean13',
            'product_upc',
            'product_reference',
            'product_supplier_reference',
            'product_weight',
            'tax_computation_method',
            'id_tax_rules_group',
            'ecotax',
            'ecotax_tax_rate',
            'download_nb',
            'unit_price_tax_incl',
            'unit_price_tax_excl',
            'total_price_tax_incl',
            'total_price_tax_excl',
            'total_shipping_price_tax_excl',
            'total_shipping_price_tax_incl',
            'purchase_supplier_price',
            'original_product_price',
            'original_wholesale_price'
        ], [], [], [0, 9, 10, 11, 12, 16], {
            taxes: { tax: ["id"] }
        }) || this;
    }
    return OrderDetailService;
}(AbstractService));
OrderDetailService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
OrderDetailService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var OrderCartRuleService = (function (_super) {
    __extends$1(OrderCartRuleService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function OrderCartRuleService(http, apiService) {
        return _super.call(this, http, apiService, 'order_cart_rule', 'order_discounts', [
            'id_order' /* [0] */,
            'id_cart_rule' /* [1] */,
            'id_order_invoice',
            'name' /* [3] */,
            'value' /* [4] */,
            'value_tax_excl' /* [5] */,
            'free_shipping'
        ], [], [], [0, 1, 3, 4, 5], null) || this;
    }
    return OrderCartRuleService;
}(AbstractService));
OrderCartRuleService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
OrderCartRuleService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var OrderHistoryService = (function (_super) {
    __extends$1(OrderHistoryService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function OrderHistoryService(http, apiService) {
        return _super.call(this, http, apiService, 'order_history', 'order_histories', [
            'id_employee',
            'id_order_state' /* [1] */,
            'id_order' /* [2] */,
            'date_add'
        ], [], [], [1, 2], null) || this;
    }
    return OrderHistoryService;
}(AbstractService));
OrderHistoryService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
OrderHistoryService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var OrderInvoiceService = (function (_super) {
    __extends$1(OrderInvoiceService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function OrderInvoiceService(http, apiService) {
        return _super.call(this, http, apiService, 'order_invoice', 'order_invoices', [
            'id_order' /* [0] */,
            'number' /* [1] */,
            'delivery_number',
            'delivery_date',
            'total_discount_tax_excl',
            'total_discount_tax_incl',
            'total_paid_tax_excl',
            'total_paid_tax_incl',
            'total_products',
            'total_products_wt',
            'total_shipping_tax_excl',
            'total_shipping_tax_incl',
            'shipping_tax_computation_method',
            'total_wrapping_tax_excl',
            'total_wrapping_tax_incl',
            'shop_address',
            'invoice_address',
            'delivery_address',
            'note',
            'date_add'
        ], [], [], [0, 1], null) || this;
    }
    return OrderInvoiceService;
}(AbstractService));
OrderInvoiceService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
OrderInvoiceService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var OrderPaymentService = (function (_super) {
    __extends$1(OrderPaymentService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function OrderPaymentService(http, apiService) {
        return _super.call(this, http, apiService, 'order_payment', 'order_payments', [
            'order_reference',
            'id_currency' /* [1] */,
            'amount' /* [2] */,
            'payment_method',
            'conversion_rate',
            'transaction_id',
            'card_number',
            'card_brand',
            'card_expiration',
            'card_holder',
            'date_add'
        ], [], [], [1, 2], null) || this;
    }
    return OrderPaymentService;
}(AbstractService));
OrderPaymentService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
OrderPaymentService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var OrderSlipService = (function (_super) {
    __extends$1(OrderSlipService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function OrderSlipService(http, apiService) {
        return _super.call(this, http, apiService, 'order_slip', 'order_slip', [
            'id_customer' /* [0] */,
            'id_order' /* [1] */,
            'conversion_rate' /* [2] */,
            'total_products_tax_excl' /* [3] */,
            'total_products_tax_incl' /* [4] */,
            'total_shipping_tax_excl' /* [5] */,
            'total_shipping_tax_incl' /* [6] */,
            'amount',
            'shipping_cost',
            'shipping_cost_amount',
            'partial',
            'date_add',
            'date_upd',
            'order_slip_type'
        ], [], [], [0, 1, 2, 3, 4, 5, 6], {
            order_slip_details: { order_slip_detail: ["id", "id_order_detail", "product_quantity", "amount_tax_excl", "amount_tax_incl"] }
        }) || this;
    }
    return OrderSlipService;
}(AbstractService));
OrderSlipService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
OrderSlipService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var OrderStateService = (function (_super) {
    __extends$1(OrderStateService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function OrderStateService(http, apiService) {
        return _super.call(this, http, apiService, 'order_state', 'order_states', [
            'unremovable',
            'delivery',
            'hidden',
            'send_email',
            'module_name',
            'invoice',
            'color',
            'logable',
            'shipped',
            'paid',
            'pdf_delivery',
            'pdf_invoice',
            'deleted',
            'name' /* [13] */,
            'template' /* [14] */
        ], [13, 14], [], [13], null) || this;
    }
    return OrderStateService;
}(AbstractService));
OrderStateService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
OrderStateService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var OrderService = (function (_super) {
    __extends$1(OrderService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function OrderService(http, apiService) {
        return _super.call(this, http, apiService, 'order', 'orders', [
            'id_address_delivery' /* [0] */,
            'id_address_invoice' /* [1] */,
            'id_cart' /* [2] */,
            'id_currency' /* [3] */,
            'id_lang' /* [4] */,
            'id_customer' /* [5] */,
            'id_carrier' /* [6] */,
            'current_state',
            'module' /* [8] */,
            'invoice_number',
            'invoice_date',
            'delivery_number',
            'delivery_date',
            'valid',
            'date_add',
            'date_upd',
            'shipping_number',
            'id_shop_group',
            'id_shop',
            'secure_key',
            'payment' /* [20] */,
            'recyclable',
            'gift',
            'gift_message',
            'mobile_theme',
            'total_discounts',
            'total_discounts_tax_incl',
            'total_discounts_tax_excl',
            'total_paid' /* [28] */,
            'total_paid_tax_incl',
            'total_paid_tax_excl',
            'total_paid_real' /* [31] */,
            'total_products' /* [32] */,
            'total_products_wt' /* [33] */,
            'total_shipping',
            'total_shipping_tax_incl',
            'total_shipping_tax_excl',
            'carrier_tax_rate',
            'total_wrapping',
            'total_wrapping_tax_incl',
            'total_wrapping_tax_excl',
            'round_mode',
            'round_type',
            'conversion_rate' /* [43] */,
            'reference'
        ], [], [], [0, 1, 2, 3, 4, 5, 6, 8, 20, 28, 31, 32, 33, 43], {
            order_rows: { order_row: ["id", "product_id", "product_attribute_id", "product_quantity", "product_name", "product_reference", "product_ean13", "product_upc", "product_price", "unit_price_tax_incl", "unit_price_tax_excl"] }
        }) || this;
    }
    return OrderService;
}(AbstractService));
OrderService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
OrderService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var PriceRangeService = (function (_super) {
    __extends$1(PriceRangeService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function PriceRangeService(http, apiService) {
        return _super.call(this, http, apiService, 'price_range', 'price_ranges', [
            'id_carrier' /* [0] */,
            'delimiter1' /* [1] */,
            'delimiter2' /* [2] */
        ], [], [], [0, 1, 2], null) || this;
    }
    return PriceRangeService;
}(AbstractService));
PriceRangeService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
PriceRangeService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var CustomizationFieldService = (function (_super) {
    __extends$1(CustomizationFieldService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function CustomizationFieldService(http, apiService) {
        return _super.call(this, http, apiService, 'customization_field', 'product_customization_fields', [
            'id_product' /* [0] */,
            'type' /* [1] */,
            'required' /* [2] */,
            'name' /* [3] */
        ], [3], [], [0, 1, 2, 3], null) || this;
    }
    return CustomizationFieldService;
}(AbstractService));
CustomizationFieldService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
CustomizationFieldService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var ProductFeatureValueService = (function (_super) {
    __extends$1(ProductFeatureValueService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function ProductFeatureValueService(http, apiService) {
        return _super.call(this, http, apiService, 'product_feature_value', 'product_feature_values', [
            'id_feature' /* [0] */,
            'custom',
            'value' /* [2] */
        ], [2], [], [0, 2], null) || this;
    }
    return ProductFeatureValueService;
}(AbstractService));
ProductFeatureValueService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ProductFeatureValueService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var ProductFeatureService = (function (_super) {
    __extends$1(ProductFeatureService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function ProductFeatureService(http, apiService) {
        return _super.call(this, http, apiService, 'product_feature', 'product_features', [
            'position',
            'name' /* [1] */
        ], [1], [], [1], null) || this;
    }
    return ProductFeatureService;
}(AbstractService));
ProductFeatureService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ProductFeatureService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var ProductOptionValueService = (function (_super) {
    __extends$1(ProductOptionValueService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function ProductOptionValueService(http, apiService) {
        return _super.call(this, http, apiService, 'product_option_value', 'product_option_values', [
            'id_attribute_group' /* [0] */,
            'color',
            'position',
            'name' /* [3] */
        ], [3], [], [0, 3], null) || this;
    }
    return ProductOptionValueService;
}(AbstractService));
ProductOptionValueService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ProductOptionValueService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var ProductOptionService = (function (_super) {
    __extends$1(ProductOptionService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function ProductOptionService(http, apiService) {
        return _super.call(this, http, apiService, 'product_option', 'product_options', [
            'is_color_group',
            'group_type' /* [1] */,
            'position',
            'name' /* [3] */,
            'public_name' /* [4] */
        ], [3, 4], [], [1, 3, 4], {
            product_option_values: { product_option_value: ["id"] }
        }) || this;
    }
    return ProductOptionService;
}(AbstractService));
ProductOptionService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ProductOptionService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var ProductSupplierService = (function (_super) {
    __extends$1(ProductSupplierService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function ProductSupplierService(http, apiService) {
        return _super.call(this, http, apiService, 'product_supplier', 'product_suppliers', [
            'id_product' /* [0] */,
            'id_product_attribute' /* [1] */,
            'id_supplier' /* [2] */,
            'id_currency',
            'product_supplier_reference',
            'product_supplier_price_te'
        ], [], [], [0, 1, 2], null) || this;
    }
    return ProductSupplierService;
}(AbstractService));
ProductSupplierService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ProductSupplierService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var ProductService = (function (_super) {
    __extends$1(ProductService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function ProductService(http, apiService) {
        return _super.call(this, http, apiService, 'product', 'products', [
            'id_manufacturer',
            'id_supplier',
            'id_category_default',
            'ps_new',
            'cache_default_attribute',
            'id_default_image',
            'id_default_combination',
            'id_tax_rules_group',
            'position_in_category',
            'manufacturer_name' /* [9] */,
            'quantity' /* [10] */,
            'type',
            'id_shop_default',
            'reference',
            'supplier_reference',
            'location',
            'width',
            'height',
            'depth',
            'weight',
            'quantity_discount',
            'ean13',
            'upc',
            'cache_is_pack',
            'cache_has_attachments',
            'is_virtual',
            'on_sale',
            'online_only',
            'ecotax',
            'minimal_quantity',
            'price' /* [30] */,
            'wholesale_price',
            'unity',
            'unit_price_ratio',
            'additional_shipping_cost',
            'customizable',
            'text_fields',
            'uploadable_files',
            'active',
            'redirect_type',
            'id_product_redirected',
            'available_for_order',
            'available_date',
            'condition',
            'show_price',
            'indexed',
            'visibility',
            'advanced_stock_management',
            'date_add',
            'date_upd',
            'pack_stock_type',
            'meta_description' /* [51] */,
            'meta_keywords' /* [52] */,
            'meta_title' /* [53] */,
            'link_rewrite' /* [54] */,
            'name' /* [55] */,
            'description' /* [56] */,
            'description_short' /* [57] */,
            'available_now' /* [58] */,
            'available_later' /* [59] */
        ], [51, 52, 53, 54, 55, 56, 57, 58, 59], [9, 10], [30, 54, 55], {
            categories: { category: ["id"] },
            images: { image: ["id"] },
            combinations: { combination: ["id"] },
            product_option_values: { product_option_value: ["id"] },
            product_features: { product_feature: ["id", "id_feature_value"] },
            tags: { tag: ["id"] },
            stock_availables: { stock_available: ["id", "id_product_attribute"] },
            accessories: { product: ["id"] },
            product_bundle: { product: ["id", "quantity"] }
        }) || this;
    }
    return ProductService;
}(AbstractService));
ProductService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ProductService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var ShopGroupService = (function (_super) {
    __extends$1(ShopGroupService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function ShopGroupService(http, apiService) {
        return _super.call(this, http, apiService, 'shop_group', 'shop_groups', [
            'name' /* [0] */,
            'share_customer',
            'share_order',
            'share_stock',
            'active',
            'deleted'
        ], [], [], [0], null) || this;
    }
    return ShopGroupService;
}(AbstractService));
ShopGroupService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ShopGroupService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var ShopUrlService = (function (_super) {
    __extends$1(ShopUrlService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function ShopUrlService(http, apiService) {
        return _super.call(this, http, apiService, 'shop_url', 'shop_urls', [
            'id_shop' /* [0] */,
            'active',
            'main',
            'domain' /* [3] */,
            'domain_ssl',
            'physical_uri',
            'virtual_uri'
        ], [], [], [0, 3], null) || this;
    }
    return ShopUrlService;
}(AbstractService));
ShopUrlService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ShopUrlService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var ShopService = (function (_super) {
    __extends$1(ShopService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function ShopService(http, apiService) {
        return _super.call(this, http, apiService, 'shop', 'shops', [
            'id_shop_group' /* [0] */,
            'id_category' /* [1] */,
            'id_theme' /* [2] */,
            'active',
            'deleted',
            'name' /* [5] */
        ], [], [], [0, 1, 2, 5], null) || this;
    }
    return ShopService;
}(AbstractService));
ShopService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ShopService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var SpecificPriceRuleService = (function (_super) {
    __extends$1(SpecificPriceRuleService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function SpecificPriceRuleService(http, apiService) {
        return _super.call(this, http, apiService, 'specific_price_rule', 'specific_price_rules', [
            'id_shop' /* [0] */,
            'id_country' /* [1] */,
            'id_currency' /* [2] */,
            'id_group' /* [3] */,
            'name' /* [4] */,
            'from_quantity' /* [5] */,
            'price' /* [6] */,
            'reduction' /* [7] */,
            'reduction_tax' /* [8] */,
            'reduction_type' /* [9] */,
            'from',
            'to'
        ], [], [], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], null) || this;
    }
    return SpecificPriceRuleService;
}(AbstractService));
SpecificPriceRuleService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
SpecificPriceRuleService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var SpecificPriceService = (function (_super) {
    __extends$1(SpecificPriceService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function SpecificPriceService(http, apiService) {
        return _super.call(this, http, apiService, 'specific_price', 'specific_prices', [
            'id_shop_group',
            'id_shop' /* [1] */,
            'id_cart' /* [2] */,
            'id_product' /* [3] */,
            'id_product_attribute',
            'id_currency' /* [5] */,
            'id_country' /* [6] */,
            'id_group' /* [7] */,
            'id_customer' /* [8] */,
            'id_specific_price_rule',
            'price' /* [10] */,
            'from_quantity' /* [11] */,
            'reduction' /* [12] */,
            'reduction_tax' /* [13] */,
            'reduction_type' /* [14] */,
            'from' /* [15] */,
            'to' /* [16] */
        ], [], [], [1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16], null) || this;
    }
    return SpecificPriceService;
}(AbstractService));
SpecificPriceService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
SpecificPriceService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var StateService = (function (_super) {
    __extends$1(StateService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function StateService(http, apiService) {
        return _super.call(this, http, apiService, 'state', 'states', [
            'id_zone' /* [0] */,
            'id_country' /* [1] */,
            'iso_code' /* [2] */,
            'name' /* [3] */,
            'active'
        ], [], [], [0, 1, 2, 3], null) || this;
    }
    return StateService;
}(AbstractService));
StateService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
StateService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var StockAvailableService = (function (_super) {
    __extends$1(StockAvailableService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function StockAvailableService(http, apiService) {
        return _super.call(this, http, apiService, 'stock_available', 'stock_availables', [
            'id_product' /* [0] */,
            'id_product_attribute' /* [1] */,
            'id_shop',
            'id_shop_group',
            'quantity' /* [4] */,
            'depends_on_stock' /* [5] */,
            'out_of_stock' /* [6] */
        ], [], [], [0, 1, 4, 5, 6], null) || this;
    }
    return StockAvailableService;
}(AbstractService));
StockAvailableService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
StockAvailableService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var StockMovementReasonService = (function (_super) {
    __extends$1(StockMovementReasonService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function StockMovementReasonService(http, apiService) {
        return _super.call(this, http, apiService, 'stock_movement_reason', 'stock_movement_reasons', [
            'sign',
            'deleted',
            'date_add',
            'date_upd',
            'name' /* [4] */
        ], [4], [], [4], null) || this;
    }
    return StockMovementReasonService;
}(AbstractService));
StockMovementReasonService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
StockMovementReasonService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var StockMvtService = (function (_super) {
    __extends$1(StockMvtService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function StockMvtService(http, apiService) {
        return _super.call(this, http, apiService, 'stock_mvt', 'stock_movements', [
            'id_product',
            'id_product_attribute',
            'id_warehouse',
            'id_currency',
            'management_type',
            'id_employee' /* [5] */,
            'id_stock' /* [6] */,
            'id_stock_mvt_reason' /* [7] */,
            'id_order',
            'id_supply_order',
            'product_name' /* [10] */,
            'ean13',
            'upc',
            'reference',
            'physical_quantity' /* [14] */,
            'sign' /* [15] */,
            'last_wa',
            'current_wa',
            'price_te' /* [18] */,
            'date_add' /* [19] */
        ], [10], [], [5, 6, 7, 14, 15, 18, 19], null) || this;
    }
    return StockMvtService;
}(AbstractService));
StockMvtService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
StockMvtService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var StockService = (function (_super) {
    __extends$1(StockService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function StockService(http, apiService) {
        return _super.call(this, http, apiService, 'stock', 'stocks', [
            'id_warehouse' /* [0] */,
            'id_product' /* [1] */,
            'id_product_attribute' /* [2] */,
            'real_quantity' /* [3] */,
            'reference',
            'ean13',
            'upc',
            'physical_quantity' /* [7] */,
            'usable_quantity' /* [8] */,
            'price_te' /* [9] */
        ], [], [3], [0, 1, 2, 7, 8, 9], null) || this;
    }
    return StockService;
}(AbstractService));
StockService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
StockService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var StoreService = (function (_super) {
    __extends$1(StoreService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function StoreService(http, apiService) {
        return _super.call(this, http, apiService, 'store', 'stores', [
            'id_country' /* [0] */,
            'id_state',
            'hours',
            'name' /* [3] */,
            'address1' /* [4] */,
            'address2',
            'postcode',
            'city' /* [7] */,
            'latitude',
            'longitude',
            'phone',
            'fax',
            'note',
            'email',
            'active' /* [14] */,
            'date_add',
            'date_upd'
        ], [], [], [0, 3, 4, 7, 14], null) || this;
    }
    return StoreService;
}(AbstractService));
StoreService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
StoreService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var SupplierService = (function (_super) {
    __extends$1(SupplierService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function SupplierService(http, apiService) {
        return _super.call(this, http, apiService, 'supplier', 'suppliers', [
            'link_rewrite',
            'name' /* [1] */,
            'active',
            'date_add',
            'date_upd',
            'description' /* [5] */,
            'meta_title' /* [6] */,
            'meta_description' /* [7] */,
            'meta_keywords' /* [8] */
        ], [5, 6, 7, 8], [], [1], null) || this;
    }
    return SupplierService;
}(AbstractService));
SupplierService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
SupplierService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var SupplyOrderDetailService = (function (_super) {
    __extends$1(SupplyOrderDetailService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function SupplyOrderDetailService(http, apiService) {
        return _super.call(this, http, apiService, 'supply_order_detail', 'supply_order_details', [
            'id_supply_order' /* [0] */,
            'id_product' /* [1] */,
            'id_product_attribute' /* [2] */,
            'reference',
            'supplier_reference',
            'name' /* [5] */,
            'ean13',
            'upc',
            'exchange_rate' /* [8] */,
            'unit_price_te' /* [9] */,
            'quantity_expected' /* [10] */,
            'quantity_received',
            'price_te' /* [12] */,
            'discount_rate' /* [13] */,
            'discount_value_te' /* [14] */,
            'price_with_discount_te' /* [15] */,
            'tax_rate' /* [16] */,
            'tax_value' /* [17] */,
            'price_ti' /* [18] */,
            'tax_value_with_order_discount' /* [19] */,
            'price_with_order_discount_te' /* [20] */
        ], [], [], [0, 1, 2, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20], null) || this;
    }
    return SupplyOrderDetailService;
}(AbstractService));
SupplyOrderDetailService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
SupplyOrderDetailService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var SupplyOrderHistoryService = (function (_super) {
    __extends$1(SupplyOrderHistoryService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function SupplyOrderHistoryService(http, apiService) {
        return _super.call(this, http, apiService, 'supply_order_history', 'supply_order_histories', [
            'id_supply_order' /* [0] */,
            'id_employee' /* [1] */,
            'id_state' /* [2] */,
            'employee_firstname',
            'employee_lastname',
            'date_add' /* [5] */
        ], [], [], [0, 1, 2, 5], null) || this;
    }
    return SupplyOrderHistoryService;
}(AbstractService));
SupplyOrderHistoryService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
SupplyOrderHistoryService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var SupplyOrderReceiptHistoryService = (function (_super) {
    __extends$1(SupplyOrderReceiptHistoryService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function SupplyOrderReceiptHistoryService(http, apiService) {
        return _super.call(this, http, apiService, 'supply_order_receipt_history', 'supply_order_receipt_histories', [
            'id_supply_order_detail' /* [0] */,
            'id_employee' /* [1] */,
            'id_supply_order_state' /* [2] */,
            'employee_firstname',
            'employee_lastname',
            'quantity' /* [5] */,
            'date_add'
        ], [], [], [0, 1, 2, 5], null) || this;
    }
    return SupplyOrderReceiptHistoryService;
}(AbstractService));
SupplyOrderReceiptHistoryService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
SupplyOrderReceiptHistoryService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var SupplyOrderStateService = (function (_super) {
    __extends$1(SupplyOrderStateService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function SupplyOrderStateService(http, apiService) {
        return _super.call(this, http, apiService, 'supply_order_state', 'supply_order_states', [
            'delivery_note',
            'editable',
            'receipt_state',
            'pending_receipt',
            'enclosed',
            'color',
            'name' /* [6] */
        ], [6], [], [6], null) || this;
    }
    return SupplyOrderStateService;
}(AbstractService));
SupplyOrderStateService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
SupplyOrderStateService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var SupplyOrderService = (function (_super) {
    __extends$1(SupplyOrderService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function SupplyOrderService(http, apiService) {
        return _super.call(this, http, apiService, 'supply_order', 'supply_orders', [
            'id_supplier' /* [0] */,
            'id_lang' /* [1] */,
            'id_warehouse' /* [2] */,
            'id_supply_order_state' /* [3] */,
            'id_currency' /* [4] */,
            'supplier_name',
            'reference' /* [6] */,
            'date_delivery_expected' /* [7] */,
            'total_te',
            'total_with_discount_te',
            'total_ti',
            'total_tax',
            'discount_rate',
            'discount_value_te',
            'is_template',
            'date_add',
            'date_upd'
        ], [], [], [0, 1, 2, 3, 4, 6, 7], {
            supply_order_details: { supply_order_detail: ["id", "id_product", "id_product_attribute", "supplier_reference", "product_name"] }
        }) || this;
    }
    return SupplyOrderService;
}(AbstractService));
SupplyOrderService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
SupplyOrderService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var TagService = (function (_super) {
    __extends$1(TagService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function TagService(http, apiService) {
        return _super.call(this, http, apiService, 'tag', 'tags', [
            'id_lang' /* [0] */,
            'name' /* [1] */
        ], [], [], [0, 1], null) || this;
    }
    return TagService;
}(AbstractService));
TagService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
TagService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var TaxRuleGroupService = (function (_super) {
    __extends$1(TaxRuleGroupService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function TaxRuleGroupService(http, apiService) {
        return _super.call(this, http, apiService, 'tax_rule_group', 'tax_rule_groups', [
            'name' /* [0] */,
            'active',
            'deleted',
            'date_add',
            'date_upd'
        ], [], [], [0], null) || this;
    }
    return TaxRuleGroupService;
}(AbstractService));
TaxRuleGroupService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
TaxRuleGroupService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var TaxRuleService = (function (_super) {
    __extends$1(TaxRuleService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function TaxRuleService(http, apiService) {
        return _super.call(this, http, apiService, 'tax_rule', 'tax_rules', [
            'id_tax_rules_group' /* [0] */,
            'id_state',
            'id_country' /* [2] */,
            'zipcode_from',
            'zipcode_to',
            'id_tax' /* [5] */,
            'behavior',
            'description'
        ], [], [], [0, 2, 5], null) || this;
    }
    return TaxRuleService;
}(AbstractService));
TaxRuleService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
TaxRuleService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var TaxService = (function (_super) {
    __extends$1(TaxService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function TaxService(http, apiService) {
        return _super.call(this, http, apiService, 'tax', 'taxes', [
            'rate' /* [0] */,
            'active',
            'deleted',
            'name' /* [3] */
        ], [3], [], [0, 3], null) || this;
    }
    return TaxService;
}(AbstractService));
TaxService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
TaxService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var TranslatedConfigurationService = (function (_super) {
    __extends$1(TranslatedConfigurationService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function TranslatedConfigurationService(http, apiService) {
        return _super.call(this, http, apiService, 'translated_configuration', 'translated_configurations', [
            'value' /* [0] */,
            'date_add',
            'date_upd',
            'name' /* [3] */,
            'id_shop_group',
            'id_shop'
        ], [0], [], [3], null) || this;
    }
    return TranslatedConfigurationService;
}(AbstractService));
TranslatedConfigurationService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
TranslatedConfigurationService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var WarehouseProductLocationService = (function (_super) {
    __extends$1(WarehouseProductLocationService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function WarehouseProductLocationService(http, apiService) {
        return _super.call(this, http, apiService, 'warehouse_product_location', 'warehouse_product_locations', [
            'id_product' /* [0] */,
            'id_product_attribute' /* [1] */,
            'id_warehouse' /* [2] */,
            'location'
        ], [], [], [0, 1, 2], null) || this;
    }
    return WarehouseProductLocationService;
}(AbstractService));
WarehouseProductLocationService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
WarehouseProductLocationService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var WarehouseService = (function (_super) {
    __extends$1(WarehouseService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function WarehouseService(http, apiService) {
        return _super.call(this, http, apiService, 'warehouse', 'warehouses', [
            'id_address' /* [0] */,
            'id_employee' /* [1] */,
            'id_currency' /* [2] */,
            'valuation' /* [3] */,
            'deleted',
            'reference' /* [5] */,
            'name' /* [6] */,
            'management_type' /* [7] */
        ], [], [3], [0, 1, 2, 5, 6, 7], {
            stocks: { stock: ["id"] },
            carriers: { carrier: ["id"] },
            shops: { shop: ["id", "name"] }
        }) || this;
    }
    return WarehouseService;
}(AbstractService));
WarehouseService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
WarehouseService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var WeightRangeService = (function (_super) {
    __extends$1(WeightRangeService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function WeightRangeService(http, apiService) {
        return _super.call(this, http, apiService, 'weight_range', 'weight_ranges', [
            'id_carrier' /* [0] */,
            'delimiter1' /* [1] */,
            'delimiter2' /* [2] */
        ], [], [], [0, 1, 2], null) || this;
    }
    return WeightRangeService;
}(AbstractService));
WeightRangeService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
WeightRangeService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };
var ZoneService = (function (_super) {
    __extends$1(ZoneService, _super);
    /**
     * @param {?} http
     * @param {?} apiService
     */
    function ZoneService(http, apiService) {
        return _super.call(this, http, apiService, 'zone', 'zones', [
            'name' /* [0] */,
            'active'
        ], [], [], [0], null) || this;
    }
    return ZoneService;
}(AbstractService));
ZoneService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ZoneService.ctorParameters = function () { return [
    { type: Http, },
    { type: APIService, },
]; };

var PrestashopApiModule = (function () {
    function PrestashopApiModule() {
    }
    return PrestashopApiModule;
}());
PrestashopApiModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    HttpModule
                ],
                providers: [
                    APIService,
                    RequestService,
                    AddressService,
                    CarrierService,
                    CartRuleService,
                    CartService,
                    CategoryService,
                    CombinationService,
                    ConfigurationService,
                    ContactService,
                    ContentService,
                    CountryService,
                    CurrencyService,
                    CustomerMessageService,
                    CustomerThreadService,
                    CustomerService,
                    CustomizationService,
                    DeliveryService,
                    EmployeeService,
                    GroupService,
                    GuestService,
                    ImageTypeService,
                    LanguageService,
                    ManufacturerService,
                    OrderCarrierService,
                    OrderDetailService,
                    OrderCartRuleService,
                    OrderHistoryService,
                    OrderInvoiceService,
                    OrderPaymentService,
                    OrderSlipService,
                    OrderStateService,
                    OrderService,
                    PriceRangeService,
                    CustomizationFieldService,
                    ProductFeatureValueService,
                    ProductFeatureService,
                    ProductOptionValueService,
                    ProductOptionService,
                    ProductSupplierService,
                    ProductService,
                    ShopGroupService,
                    ShopUrlService,
                    ShopService,
                    SpecificPriceRuleService,
                    SpecificPriceService,
                    StateService,
                    StockAvailableService,
                    StockMovementReasonService,
                    StockMvtService,
                    StockService,
                    StoreService,
                    SupplierService,
                    SupplyOrderDetailService,
                    SupplyOrderHistoryService,
                    SupplyOrderReceiptHistoryService,
                    SupplyOrderStateService,
                    SupplyOrderService,
                    TagService,
                    TaxRuleGroupService,
                    TaxRuleService,
                    TaxService,
                    TranslatedConfigurationService,
                    WarehouseProductLocationService,
                    WarehouseService,
                    WeightRangeService,
                    ZoneService
                ],
                declarations: [],
                exports: []
            },] },
];
/**
 * @nocollapse
 */
PrestashopApiModule.ctorParameters = function () { return []; };

export { RequestService, APIParametersNames, APIParametersValues, APIParameters, PrestashopApiModule, APIService, AbstractService, AddressService, CarrierService, CartRuleService, CartService, CategoryService, CombinationService, ConfigurationService, ContactService, ContentService, CountryService, CurrencyService, CustomerMessageService, CustomerThreadService, CustomerService, CustomizationService, DeliveryService, EmployeeService, GroupService, GuestService, ImageTypeService, LanguageService, ManufacturerService, OrderCarrierService, OrderDetailService, OrderCartRuleService, OrderHistoryService, OrderInvoiceService, OrderPaymentService, OrderSlipService, OrderStateService, OrderService, PriceRangeService, CustomizationFieldService, ProductFeatureValueService, ProductFeatureService, ProductOptionValueService, ProductOptionService, ProductSupplierService, ProductService, ShopGroupService, ShopUrlService, ShopService, SpecificPriceRuleService, SpecificPriceService, StateService, StockAvailableService, StockMovementReasonService, StockMvtService, StockService, StoreService, SupplierService, SupplyOrderDetailService, SupplyOrderHistoryService, SupplyOrderReceiptHistoryService, SupplyOrderStateService, SupplyOrderService, TagService, TaxRuleGroupService, TaxRuleService, TaxService, TranslatedConfigurationService, WarehouseProductLocationService, WarehouseService, WeightRangeService, ZoneService };
