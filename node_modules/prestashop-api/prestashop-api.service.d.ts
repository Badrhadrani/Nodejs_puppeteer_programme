import { EventEmitter } from '@angular/core';
import { Http, RequestMethod } from '@angular/http';
import { Observable } from 'rxjs';
import 'rxjs/add/operator/map';
import { RequestService, APIParameters } from "./core/request";
export declare class APIService {
    protected http: Http;
    private _requestService;
    private _connected;
    private _resourcesMethods;
    constructor(http: Http, requestService: RequestService);
    private _languages;
    readonly languages: Language[];
    id_languageChange: EventEmitter<string>;
    private _id_language;
    id_language: string;
    readonly requestService: RequestService;
    readonly connected: boolean;
    connect(url: string, key: string): Observable<boolean>;
    getLanguages(): Observable<Language[]>;
    getMethodAsString(method: RequestMethod): string;
    isMethodAllowed(resource: string, method: RequestMethod): boolean;
}
import { PSObject } from './core/model';
export declare abstract class AbstractService<T extends PSObject> {
    protected http: Http;
    protected apiService: APIService;
    protected nodename: string;
    protected resource: string;
    protected properties: string[];
    protected translatableIndexes: number[];
    protected readonlyIndexes: number[];
    protected requiredIndexes: number[];
    protected associations: {
        [name: string]: {
            [nodeName: string]: string[];
        };
    };
    constructor(http: Http, apiService: APIService, nodename: string, resource: string, properties: string[], translatableIndexes: number[], readonlyIndexes: number[], requiredIndexes: number[], associations: {
        [name: string]: {
            [nodeName: string]: string[];
        };
    });
    createInstance(id: string | null): T;
    get(id: string): Observable<T | any>;
    search(parameters: APIParameters): Observable<T[] | any>;
    put(input: T | T[]): Observable<T | T[] | any>;
    post(input: T | T[]): Observable<T | T[] | any>;
    delete(id: string | string[]): Observable<boolean | any>;
    isTranslatable(propertie: string): boolean;
    isWritable(propertie: string): boolean;
    isRequired(propertie: string): boolean;
    serialize(input: T | T[], method: RequestMethod): string | Error;
    private send(input, method);
    private readonly requestService;
    private readonly id_language;
    private readonly apiParameters;
    private getErrorObservable(error);
    private checkConnectionAndMeyhodIsAllowed(method);
    private serializeValue(value);
    private hasProperties(item, properties);
    private serializeInstance(instance, method);
}
import { Address, Carrier, CartRule, Cart, Category, Combination, Configuration, Contact, Content, Country, Currency, CustomerMessage, CustomerThread, Customer, Customization, Delivery, Employee, Group, Guest, ImageType, Language, Manufacturer, OrderCarrier, OrderDetail, OrderCartRule, OrderHistory, OrderInvoice, OrderPayment, OrderSlip, OrderState, Order, PriceRange, CustomizationField, ProductFeatureValue, ProductFeature, ProductOptionValue, ProductOption, ProductSupplier, Product, ShopGroup, ShopUrl, Shop, SpecificPriceRule, SpecificPrice, State, StockAvailable, StockMovementReason, StockMvt, Stock, Store, Supplier, SupplyOrderDetail, SupplyOrderHistory, SupplyOrderReceiptHistory, SupplyOrderState, SupplyOrder, Tag, TaxRuleGroup, TaxRule, Tax, TranslatedConfiguration, WarehouseProductLocation, Warehouse, WeightRange, Zone } from './core/model';
export declare class AddressService extends AbstractService<Address> {
    constructor(http: Http, apiService: APIService);
}
export declare class CarrierService extends AbstractService<Carrier> {
    constructor(http: Http, apiService: APIService);
}
export declare class CartRuleService extends AbstractService<CartRule> {
    constructor(http: Http, apiService: APIService);
}
export declare class CartService extends AbstractService<Cart> {
    constructor(http: Http, apiService: APIService);
}
export declare class CategoryService extends AbstractService<Category> {
    constructor(http: Http, apiService: APIService);
}
export declare class CombinationService extends AbstractService<Combination> {
    constructor(http: Http, apiService: APIService);
}
export declare class ConfigurationService extends AbstractService<Configuration> {
    constructor(http: Http, apiService: APIService);
}
export declare class ContactService extends AbstractService<Contact> {
    constructor(http: Http, apiService: APIService);
}
export declare class ContentService extends AbstractService<Content> {
    constructor(http: Http, apiService: APIService);
}
export declare class CountryService extends AbstractService<Country> {
    constructor(http: Http, apiService: APIService);
}
export declare class CurrencyService extends AbstractService<Currency> {
    constructor(http: Http, apiService: APIService);
}
export declare class CustomerMessageService extends AbstractService<CustomerMessage> {
    constructor(http: Http, apiService: APIService);
}
export declare class CustomerThreadService extends AbstractService<CustomerThread> {
    constructor(http: Http, apiService: APIService);
}
export declare class CustomerService extends AbstractService<Customer> {
    constructor(http: Http, apiService: APIService);
}
export declare class CustomizationService extends AbstractService<Customization> {
    constructor(http: Http, apiService: APIService);
}
export declare class DeliveryService extends AbstractService<Delivery> {
    constructor(http: Http, apiService: APIService);
}
export declare class EmployeeService extends AbstractService<Employee> {
    constructor(http: Http, apiService: APIService);
}
export declare class GroupService extends AbstractService<Group> {
    constructor(http: Http, apiService: APIService);
}
export declare class GuestService extends AbstractService<Guest> {
    constructor(http: Http, apiService: APIService);
}
export declare class ImageTypeService extends AbstractService<ImageType> {
    constructor(http: Http, apiService: APIService);
}
export declare class LanguageService extends AbstractService<Language> {
    constructor(http: Http, apiService: APIService);
}
export declare class ManufacturerService extends AbstractService<Manufacturer> {
    constructor(http: Http, apiService: APIService);
}
export declare class OrderCarrierService extends AbstractService<OrderCarrier> {
    constructor(http: Http, apiService: APIService);
}
export declare class OrderDetailService extends AbstractService<OrderDetail> {
    constructor(http: Http, apiService: APIService);
}
export declare class OrderCartRuleService extends AbstractService<OrderCartRule> {
    constructor(http: Http, apiService: APIService);
}
export declare class OrderHistoryService extends AbstractService<OrderHistory> {
    constructor(http: Http, apiService: APIService);
}
export declare class OrderInvoiceService extends AbstractService<OrderInvoice> {
    constructor(http: Http, apiService: APIService);
}
export declare class OrderPaymentService extends AbstractService<OrderPayment> {
    constructor(http: Http, apiService: APIService);
}
export declare class OrderSlipService extends AbstractService<OrderSlip> {
    constructor(http: Http, apiService: APIService);
}
export declare class OrderStateService extends AbstractService<OrderState> {
    constructor(http: Http, apiService: APIService);
}
export declare class OrderService extends AbstractService<Order> {
    constructor(http: Http, apiService: APIService);
}
export declare class PriceRangeService extends AbstractService<PriceRange> {
    constructor(http: Http, apiService: APIService);
}
export declare class CustomizationFieldService extends AbstractService<CustomizationField> {
    constructor(http: Http, apiService: APIService);
}
export declare class ProductFeatureValueService extends AbstractService<ProductFeatureValue> {
    constructor(http: Http, apiService: APIService);
}
export declare class ProductFeatureService extends AbstractService<ProductFeature> {
    constructor(http: Http, apiService: APIService);
}
export declare class ProductOptionValueService extends AbstractService<ProductOptionValue> {
    constructor(http: Http, apiService: APIService);
}
export declare class ProductOptionService extends AbstractService<ProductOption> {
    constructor(http: Http, apiService: APIService);
}
export declare class ProductSupplierService extends AbstractService<ProductSupplier> {
    constructor(http: Http, apiService: APIService);
}
export declare class ProductService extends AbstractService<Product> {
    constructor(http: Http, apiService: APIService);
}
export declare class ShopGroupService extends AbstractService<ShopGroup> {
    constructor(http: Http, apiService: APIService);
}
export declare class ShopUrlService extends AbstractService<ShopUrl> {
    constructor(http: Http, apiService: APIService);
}
export declare class ShopService extends AbstractService<Shop> {
    constructor(http: Http, apiService: APIService);
}
export declare class SpecificPriceRuleService extends AbstractService<SpecificPriceRule> {
    constructor(http: Http, apiService: APIService);
}
export declare class SpecificPriceService extends AbstractService<SpecificPrice> {
    constructor(http: Http, apiService: APIService);
}
export declare class StateService extends AbstractService<State> {
    constructor(http: Http, apiService: APIService);
}
export declare class StockAvailableService extends AbstractService<StockAvailable> {
    constructor(http: Http, apiService: APIService);
}
export declare class StockMovementReasonService extends AbstractService<StockMovementReason> {
    constructor(http: Http, apiService: APIService);
}
export declare class StockMvtService extends AbstractService<StockMvt> {
    constructor(http: Http, apiService: APIService);
}
export declare class StockService extends AbstractService<Stock> {
    constructor(http: Http, apiService: APIService);
}
export declare class StoreService extends AbstractService<Store> {
    constructor(http: Http, apiService: APIService);
}
export declare class SupplierService extends AbstractService<Supplier> {
    constructor(http: Http, apiService: APIService);
}
export declare class SupplyOrderDetailService extends AbstractService<SupplyOrderDetail> {
    constructor(http: Http, apiService: APIService);
}
export declare class SupplyOrderHistoryService extends AbstractService<SupplyOrderHistory> {
    constructor(http: Http, apiService: APIService);
}
export declare class SupplyOrderReceiptHistoryService extends AbstractService<SupplyOrderReceiptHistory> {
    constructor(http: Http, apiService: APIService);
}
export declare class SupplyOrderStateService extends AbstractService<SupplyOrderState> {
    constructor(http: Http, apiService: APIService);
}
export declare class SupplyOrderService extends AbstractService<SupplyOrder> {
    constructor(http: Http, apiService: APIService);
}
export declare class TagService extends AbstractService<Tag> {
    constructor(http: Http, apiService: APIService);
}
export declare class TaxRuleGroupService extends AbstractService<TaxRuleGroup> {
    constructor(http: Http, apiService: APIService);
}
export declare class TaxRuleService extends AbstractService<TaxRule> {
    constructor(http: Http, apiService: APIService);
}
export declare class TaxService extends AbstractService<Tax> {
    constructor(http: Http, apiService: APIService);
}
export declare class TranslatedConfigurationService extends AbstractService<TranslatedConfiguration> {
    constructor(http: Http, apiService: APIService);
}
export declare class WarehouseProductLocationService extends AbstractService<WarehouseProductLocation> {
    constructor(http: Http, apiService: APIService);
}
export declare class WarehouseService extends AbstractService<Warehouse> {
    constructor(http: Http, apiService: APIService);
}
export declare class WeightRangeService extends AbstractService<WeightRange> {
    constructor(http: Http, apiService: APIService);
}
export declare class ZoneService extends AbstractService<Zone> {
    constructor(http: Http, apiService: APIService);
}
